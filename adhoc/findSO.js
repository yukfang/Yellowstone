const TABLES =  require('../database/table')
const delayms = (ms) => new Promise((res, rej) => {setTimeout(res, ms * 1)})

const RAW_SO_ACCT = 
`
EU:
6940304165302239234
6989541648711581698
7109445455485878274
7198183675899445250
6964765308338896897
6977680400374087682
7091602393820971010
6958789827080749057
6956920498227789825
7185536811488329729
6958117842407424001
6963558305931247617
6964765593778028545
7086444251680243714
7074921031022018561
7165958136556306434
7114319201237483521
6964766951608434689
6953270975723028481
7235951845972246529
7109479405008879618
7016355358939578369
7016352041282863106
6890450690007629825
6935810958690353153
7119474802162712577
7038938094418100226
7197399056115597313
7003644435468697602
7242368177206820865
7042612174488977410
7038937979183808513
7065700210042863617
6964766620346548226
7257862501679808513
7095803673162366977
6870133235829964801
7038943975742455809
6935772213387771905
7200326054345490434
7085659986264719361
7257862501679808513
7245984407033610242
6999618429116268546
6964671532941475842
7231183551444697089
7136192034938847233
6964763768278499329
7109444872926429186
7003254730499620865
7062686241006911489
7072651318338306050
6964766040605655042
7063199848849309697
7176576690699747329
7016355700334936066
7044860229758025730
7205227872921894914
6894583952263086082
7038938471209254914
7225562892177883137
7109445885116809217
6964672045309280258

APAC:
6847359092017594374
6833207168313851909
7255235023396274177
7253495648866091010
7244057174287089666

CNOB:
7096304711300644866
7220732387863658497
7151945170857000961
7065929188775116801
7234331326269128705
7119696830681726978
7251528526535442434
7236621609526771713
7243633916647571457
7234331750770475010
7240053321849995265
7251528519677640706
7111233629681893377
7241518465885028353


NA:
7106907397234376706
7233524074083811330
7106915367410335746
7242368177206820865
7213763048564064258
7099079407385509889
6946010465285750785
6917322064705617921
6933263709389242369
6735952953653329926
6948438673608212482
7213762166644670465
6923210260752695297
7234986159946907650
6990485212593422337
6927381906942083074
6837146359909318661
6916945205740437506
7082787847316488193
6939998276745723906
7023453043786055682
7031956610364882946
7210610924137381889
7067969382693011458
7146268774872662017
6944022146033188865
7000493836233408513
7072471837027909633
7218586347508973570
6927487829450752002
7109568136617181186
6849761652586315782
7053104978533171202
7189335697831034882
6867125002395713542
6943296157435101185
7091392928135774210
6997071996907487233
`

async function findSO() {
    const SOACCT = RAW_SO_ACCT.trim().split('\n').filter(o=>o.length > 10)
    console.log(SOACCT.length)
 

    const OrderInfo = await TABLES.OrderInfo

    const orders = (await OrderInfo.findAll({
        attributes: [
            'order_id', 
            'summary',
            // 'updatedAt',
            // 'createdAt'
        ]
    }))?.map(o => o.dataValues)

    console.log(orders.length)
    // console.log(orders[0])

    for(let i = 0; i < orders.length; i++) {
        const order = JSON.parse(orders[i].summary)
        const adv_id = order.adv_id;
        const follower = order.follower
        // console.log(adv_id)
        for(let j = 0; j < SOACCT.length; j++) {
            const soadv  = ""+SOACCT[j]
            // console.log(soadv)
            if(adv_id.indexOf(soadv) !== -1) {
                console.log(`${orders[i].order_id} ${follower}`)
            }
            
        }
    }

}

// findSO()